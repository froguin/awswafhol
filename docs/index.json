[
{
	"uri": "/mitigation/module1.html",
	"title": "AWS Managed Rule 추가",
	"tags": [],
	"description": "",
	"content": " Web ACL 에 Rule 을 적용하기 위해서는 Rule 이나 Rule Group 을 생성하여야 합니다. 관리자는 적용하고자 하는 목적에 따라 AWS 가 관리하는 AWS Managed Rule 을 사용하거나 3rd Party 파트너가 제공하는 관리형 Rule Group 을 사용할 수도 있습니다. 아니면 Managed Rule 이나 Rule Group 을 사용하지 않고 공격 타입별로 각각의 Rule 을 생성한 후 Web ACL 에 적용할 수도 있습니다.\n여기서는 AWS Managed Rule을 적용해보도록 하겠습니다.\nAWS Managed Rule을 적용  실습에 사용할 새로운 Rule 을 Web ACL 에 추가하기 위하여 좌측의 AWS WAF 메뉴에서 Web ACL 을 선택합니다. 리전이 \u0026ldquo;Asia Pacific(Seoul)\u0026rdquo; 로 선택되어 있는 것을 확인한 후 하단의 Web ACL 리스트 중 이전 과정에서 생성한 Web ACL 을 클릭합니다.  Web ACL 메뉴를 클릭하면 선택되어 있는 리전이 Seoul Region 이 아닐 수도 있으므로 반드시 확인하시기 바랍니다.\n  선택한 Web ACL 의 상세 화면 중 상단의 \u0026ldquo;Rules\u0026rdquo; 를 선택한 후 화면 우측의 \u0026ldquo;Add rules\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 클릭하면 하위 메뉴를 확인할 수 있는데 하위 메뉴 중 \u0026ldquo;Add managed rule groups\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 선택하면 AWS Managed Rule 혹은 3rd Party 파트너가 제공하는 관리형 Rule Group 을 Web ACL 에 추가할 수 있습니다.   가장 상단의 AWS managed rule groups 를 클릭하면 적용가능한 rule group들이 나타납니다. 이중에서 Core rule set 과 SQL database 에 대해 \u0026ldquo;Add to web ACL\u0026rdquo;을 클릭하고 하단의 \u0026ldquo;Add rules\u0026rdquo;를 클릭합니다.\n  Core rule set rule group 에는 일반적으로 웹 애플리케이션에 적용할 수 있는 Rule이 포함되어 있습니다. 이러한 규칙은 OWASP 발행물 및 수많은 CVE(일반적인 취약성 및 노출도)에 설명된 취약성을 포함하여 광범위한 취약성을 악용하는 일이 없도록 보호합니자세한 사항은 AWS DOCS를 참고해주시기 바랍니다.\n SQL database rule group 에는 SQL 주입 공격과 같은 SQL 데이터베이스 악용과 관련된 요청 패턴을 차단하는 Rule이 포함되어 있습니다. 이렇게 하면 승인되지 않은 쿼리가 원격으로 삽입되는 것을 방지할 수 있습니다. 자세한 사항은 AWS DOCS를 참고해주시기 바랍니다.\n Set rule priority에서는 기본값을 그대로 두고 \u0026ldquo;save\u0026rdquo; 버튼을 클릭하여 내용을 저장합니다. 다음과 같이 정상적으로 추가된 것을 확인할 수 있습니다.\n적용한 Rule 테스트 적용한 Rule들이 정상적으로 동작을 하는지 확인하기 위해 앞서 모듈 1에서 구성했던 DVWA 웹에 접속해서 모듈 2에서 실행했던 SQL injection 과 XSS exploit를 재시도 해봅니다.\n 모든 설정이 정상적으로 이뤄졌다면 아래와 같이 이전 과정에서 차단되지 않았던 SQL injection 구문이 \u0026ldquo;403 Forbidden\u0026rdquo; 메시지와 함께 차단된 것을 확인할 수 있습니다.\n' OR 1=1 #    모든 설정이 정상적으로 이뤄졌다면 아래와 같이 이전 과정에서 차단되지 않았던 XSS exploit 구문 역시 \u0026ldquo;403 Forbidden\u0026rdquo; 메시지와 함께 차단된 것을 확인할 수 있습니다.\n\u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;   "
},
{
	"uri": "/",
	"title": "AWS WAF 공격 및 방어 실습",
	"tags": [],
	"description": "",
	"content": "본 실습 프로그램은 AWS의 웹방화벽(WAF) 서비스를 이용하여 취약한 웹 서비스에 대한 공격과 이를 방어하기 위한 AWS WAF의 구성을 실습할 수 있도록 교재를 제공하는데 그 목표를 두고 있습니다.\n2020년 3월 현재 AWS 에서는 Classic WAF 와 WAFv2 (default WAF) 두 가지 형태의 WAF 서비스를 제공하고 있으며 이 실습은 WAFv2 를 기준으로 작성되었습니다.\n  Report an issue   Learn more  "
},
{
	"uri": "/mitigation_deep/module1.html",
	"title": "Rule 백업",
	"tags": [],
	"description": "",
	"content": " JSON 기반 Rule 이번에는 AWS WAF v2 에서 새롭게 제공되는 Rule 설정 방식인 JSON 기반 Rule 생성을 해보도록 하겠습니다.\n간단한 Rule은 AWS 콘솔의 Rule visual editor를 사용하는 것이 가장 간편한 방법이지만, 모든 웹 ACL에는 JSON 형식 표현이 있습니다. 복잡한 규칙의 경우 JSON 편집기를 사용하여 웹 ACL을 관리하는 것이 가장 쉬운 방법입니다. JSON 형식의 웹 ACL에 대한 전체 구성을 검색하고 필요에 따라 수정한 다음, 콘솔, API 또는 CLI를 통해 제공할 수 있습니다.\n기존의 Rule 백업 새로운 Rule을 작성해보기 전에 현재까지 생성된 Rule 을 JSON 기반 문서로 백업해보겠습니다. 기존의 Rule을 다운로드하기 위하여 아래와 같이 Web ACL 의 화면 우측 상단의 \u0026ldquo;Download web ACL as JSON\u0026rdquo; 버튼을 클릭한 후 파일을 저장합니다.\n 저장된 파일은 여러분들이 지금까지 실습을 진행하면서 생성하였던 Rule 정보들을 포함하고 있으며 별다른 추가 설정을 하지 않았다면 아래와 같은 내용을 담고 있습니다.\n{ \u0026quot;Name\u0026quot;: \u0026quot;MyWAF\u0026quot;, \u0026quot;Id\u0026quot;: \u0026quot;ea6384e2-d0c4-421a-9cf6-1506f776548d\u0026quot;, \u0026quot;ARN\u0026quot;: \u0026quot;arn:aws:wafv2:ap-northeast-2:994024026389:regional/webacl/MyWAF/ea6384e2-d0c4-421a-9cf6-1506f776548d\u0026quot;, \u0026quot;DefaultAction\u0026quot;: { \u0026quot;Allow\u0026quot;: {} }, \u0026quot;Description\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;Rules\u0026quot;: [ { \u0026quot;Name\u0026quot;: \u0026quot;AWS-AWSManagedRulesCommonRuleSet\u0026quot;, \u0026quot;Priority\u0026quot;: 0, \u0026quot;Statement\u0026quot;: { \u0026quot;ManagedRuleGroupStatement\u0026quot;: { \u0026quot;VendorName\u0026quot;: \u0026quot;AWS\u0026quot;, \u0026quot;Name\u0026quot;: \u0026quot;AWSManagedRulesCommonRuleSet\u0026quot; } }, \u0026quot;OverrideAction\u0026quot;: { \u0026quot;None\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;AWS-AWSManagedRulesCommonRuleSet\u0026quot; } }, { \u0026quot;Name\u0026quot;: \u0026quot;AWS-AWSManagedRulesSQLiRuleSet\u0026quot;, \u0026quot;Priority\u0026quot;: 1, \u0026quot;Statement\u0026quot;: { \u0026quot;ManagedRuleGroupStatement\u0026quot;: { \u0026quot;VendorName\u0026quot;: \u0026quot;AWS\u0026quot;, \u0026quot;Name\u0026quot;: \u0026quot;AWSManagedRulesSQLiRuleSet\u0026quot; } }, \u0026quot;OverrideAction\u0026quot;: { \u0026quot;None\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;AWS-AWSManagedRulesSQLiRuleSet\u0026quot; } }, { \u0026quot;Name\u0026quot;: \u0026quot;SG-Block\u0026quot;, \u0026quot;Priority\u0026quot;: 2, \u0026quot;Statement\u0026quot;: { \u0026quot;GeoMatchStatement\u0026quot;: { \u0026quot;CountryCodes\u0026quot;: [ \u0026quot;SG\u0026quot; ] } }, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;SG-Block\u0026quot; } }, { \u0026quot;Name\u0026quot;: \u0026quot;iphone-Block\u0026quot;, \u0026quot;Priority\u0026quot;: 3, \u0026quot;Statement\u0026quot;: { \u0026quot;ByteMatchStatement\u0026quot;: { \u0026quot;SearchString\u0026quot;: \u0026quot;iphone\u0026quot;, \u0026quot;FieldToMatch\u0026quot;: { \u0026quot;SingleHeader\u0026quot;: { \u0026quot;Name\u0026quot;: \u0026quot;user-agent\u0026quot; } }, \u0026quot;TextTransformations\u0026quot;: [ { \u0026quot;Priority\u0026quot;: 0, \u0026quot;Type\u0026quot;: \u0026quot;LOWERCASE\u0026quot; } ], \u0026quot;PositionalConstraint\u0026quot;: \u0026quot;CONTAINS\u0026quot; } }, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;iphone-Block\u0026quot; } } ], \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;MyWAF\u0026quot; }, \u0026quot;Capacity\u0026quot;: 921 }  Rule 설정을 백업하였으니 이번에는 Web ACL 에서 사용하고 있는 Rule 들을 모두 삭제하도록 하겠습니다. Web ACL 의 Rules 탭으로 이동한 후 아래와 같이 현재 설정되어 있는 Rule 을 모두 선택한 후 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭합니다.  아래와 같이 Rule 삭제를 위하여 확인창이 나타나면 \u0026ldquo;delete\u0026rdquo; 를 입력해주고 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭하여 Rule 을 삭제합니다.  아래와 같이 모든 Rule 이 삭제된 상태에서 지금까지 사용했던 공격 방법 및 Singapore 에서의 접속 등이 모두 차단되지 않고 정상적으로 접속되는지 확인합니다.   "
},
{
	"uri": "/attack/module1.html",
	"title": "SQL Injection",
	"tags": [],
	"description": "",
	"content": "실제로 발생하는 다양한 웹 서비스 공격방식 중 하나인 SQL Injection 공격을 진행하도록 하겠습니다.\n SQL Injection 공격을 진행하기 위하여 DVWA 메뉴에서 아래와 같이 \u0026ldquo;SQL Injectin\u0026rdquo; 메뉴를 클릭한 후 우측의 \u0026ldquo;User ID\u0026rdquo; 를 입력하는 화면에서 아래의 SQL 구문을 입력한 후 \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭합니다.\n' OR 1=1 #   위 공격에 사용되는 특수문자는 \u0026ldquo;`\u0026rdquo; 입니다. 코드를 직접 입력했는데 공격이 성공되지 않으시는 분들은 위 코드를 그대로 복사하셔서 사용하시기 바랍니다.\n  \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭한 후 아래 화면과 같이 여러가지 계정 정보가 출력되는 것을 확인합니다.   본 실습에서 사용한 SQL 구문은 SQL Injection 공격에 사용되는 가장 기본적인 구문 중 하나입니다. 현재 사용되는 대부분의 웹 서비스는 이와 같은 간단한 SQL 구문에 대해서는 취약점이 없을 것으로 예상되지만 테스트 목적 이외의 악의적인 사용해서는 안되며 해당 행위로 인한 책임은 사용자에게 있음을 밝힙니다.\n "
},
{
	"uri": "/logging/module1.html",
	"title": "WAF 로깅",
	"tags": [],
	"description": "",
	"content": " AWS WAF 로깅 활성화 모듈 1.5 에서 활성화 및 확인을 수행했습니다.\nWAF 로그 발생  앞 선 모듈에서 발생한 로그들이 저장 되어 있어야합니다.\n S3 콘솔로 이동한 뒤 \u0026ldquo;mydvwa-\u0026ldquo;로 시작하는 버킷을 찾은 뒤 가장 하위 경로로 내려가면 다음과 같이 로그가 쌓인 것을 확인할 수 있습니다.\n   생성된 파일 중 하나를 다운로드 하여 가장 익숙한 editor로 실행하고 살펴봅니다.  AWS WAF 로그 확인 다음은 요청의 WAF 로그 예입니다. 요청 평가를 종료 한 규칙에 대한 세부 정보를 받습니다. 로그에는 해당 요청에 대한 조치도 포함됩니다.\n 해당 요청이 TestRule에 의해 차단이 되었는지에 대한 내용 및 관련 자세한 사항을 확인 할 수 있습니다. 이전에 Redacted fields 에서 선택했던 \u0026ldquo;Query string\u0026rdquo; 에 대한 필드인 args가 \u0026ldquo;REDACTED\u0026rdquo; 로 표현되어있는 것을 확인 할 수 있습니다.\n 이를 발전시켜 다양한 분석에 활용할 수 있습니다.\n  "
},
{
	"uri": "/post/module1.html",
	"title": "과정 복습",
	"tags": [],
	"description": "",
	"content": " 마치기 전에 복습 오늘 진행한 실습은 다음과 같은 절차로 이루어졌습니다.\n 위협 요인이 내재된 인프라 환경을 구성하기 위해 CloudFormation 템플릿을 실행했습니다. 템플릿 실행을 통해 생성되는 리소스는 VPC (Virtual Private Cloud), ALB (Application Load Balancer), EC2인스턴스 (Linux, Apache, MySQL, PHP), Kinesis Firehose, S3 bucket 등 입니다.\n AWS WAF가 적용되지 않은 환경에서 웹 취약점 (SQL Injection, XSS)을 확인했습니다.\n AWS Managed Rule과 custom Rule을 이용하여 다양한 Rule들을 작성하고 적용해 보았습니다.\n AWS WAF가 적용된 상태에서 1) SQL Injection, 2) XSS, 3) Bad bot 공격 차단 테스트를 수행해보고 정상적으로 차단이 되는 것으로 확인했습니다.\n AWS WAF 로그를 보고 어떤 내역들이 로깅되는지 확인해보았습니다.\n 실습이 끝난 후 CloudFormation을 삭제할 예정입니다.\n  "
},
{
	"uri": "/overview/module1.html",
	"title": "사전 지식",
	"tags": [],
	"description": "",
	"content": " AWS WAF AWS WAF는 Amazon CloudFront 배포, Amazon API Gateway API 또는 Application Load Balancer에 전달되는 HTTP(S) 요청을 모니터링할 수 있게 해주는 웹 애플리케이션 방화벽입니다.\n또한 AWS WAF을 사용하여 콘텐츠에 대한 액세스를 제어할 수 있습니다. 요청이 허용되는 IP 주소나 쿼리 문자열의 값으로부터 지정하는 조건 등 지정하는 조건에 따라, Amazon CloudFront 배포, Amazon API Gateway API 또는 Application Load Balancer는 요청된 콘텐츠나 HTTP 403 상태 코드(금지됨)로 요청에 응답합니다. 또한 요청이 차단될 때 사용자 지정 오류 페이지를 반환하도록 CloudFront를 구성할 수 있습니다.\n본 실습에서는 웹 공격에 취약하도록 의도된 web application 을 Application Load Balancer에 연결하고, AWS WAF를 통해 공격에 방어하는 체계를 구성할 예정입니다.\nAWS WAF에 대한 더 자세한 사항은 AWS Document 를 참고해주시기 바랍니다.\n AWS CloudFormation AWS CloudFormation은 Amazon Web Services 리소스를 모델링하고 설정하여 리소스 관리 시간을 줄이고 AWS에서 실행되는 애플리케이션에 더 많은 시간을 사용하도록 해 주는 서비스입니다. 필요한 모든 AWS 리소스(예: Amazon EC2 인스턴스 또는 Amazon RDS DB 인스턴스)를 설명하는 템플릿을 생성하면 AWS CloudFormation이 해당 리소스의 프로비저닝과 구성을 담당합니다. AWS 리소스를 개별적으로 생성하고 구성할 필요가 없으며 어떤 것이 무엇에 의존하는지 파악할 필요도 없습니다. AWS CloudFormation에서 모든 것을 처리합니다. 다음 시나리오는 AWS CloudFormation이 얼마나 유용한지를 보여줍니다.\n본 실습에서는 웹 공격에 취약하도록 의도된 web application 환경을 구성하기 위해 CloudFormation 템플릿을 실행합니다.\nAWS CloudFormation에 대한 더 자세한 사항은 AWS Document 를 참고해주시기 바랍니다.\n "
},
{
	"uri": "/overview.html",
	"title": "실습 개요",
	"tags": [],
	"description": "",
	"content": " 본 실습에서는 웹 공격에 취약하도록 의도된 web application ( DVWA ) 에서 AWS WAF 를 통해 웹 공격을 차단하는 방법에 대해 익혀봅니다. 실습은 약 1시간에서 1시간 반 정도 소요되며 크게 5개의 모듈로 진행됩니다.\n모듈 1. 실습 환경구성 : 웹 공격에 취약한 web application 을 AWS CloudFormation 을 통해 구축합니다. 모듈 2. 공격 테스트 : 잘 알려진 웹 공격 (SQLi , XSS expolit)으로 web application 을 공격해 봅니다. 모듈 3. AWS WAF를 이용한 방어 : AWS WAF의 AWS managed Rule 을 통해 기본적인 룰셋을 적용해보고 잘 방어가 되는지 테스트 해봅니다. 모듈 4. AWS WAF를 이용한 방어(심화) : AWS WAF의 custom Rule 을 통해 조금 더 복잡한 룰셋을 적용해보고 잘 방어가 되는지 테스트 해봅니다. 모듈 5. AWS WAF 로깅 : AWS WAF 로그를 로깅하고 확인해 봅니다. 모듈 6. 실습 구성 요소 삭제 : 생성했던 환경 자원들을 삭제합니다.   Report an issue   Learn more  "
},
{
	"uri": "/pre.html",
	"title": "실습 환경 구성",
	"tags": [],
	"description": "",
	"content": " 이 모듈에서는 모의 웹 공격을 실행할 수 있는 환경을 구성합니다. 랩 과정에 사용되는 웹 어플리케이션은 DVWA 이며 웹 취약점에 대한 공격 및 방어 기술 교육에 사용되는 오픈소스 어플리케이션입니다. 랩 과정에서 특정 국가의 요청을 차단하는 테스트를 하기 위해 Chrome에서 사용할 수 있는 extension을 설치합니다. AWF WAF Web ACL 을 생성합니다. 모듈 5. 에서 AWS WAF 로깅을 살펴보기 위해 AWS WAF 로깅을 활성화합니다.  "
},
{
	"uri": "/post/module2.html",
	"title": "AWS 자원 삭제",
	"tags": [],
	"description": "",
	"content": " 본 실습 과정에서 사용된 AWS 자원은 크게 2가지 유형으로 생성되었습니다. 하나는 CloudFormation 을 통하여 자동으로 생성되었고 하나는 Web ACL 로 여러분들이 각각 수작업으로 생성이 되었습니다. 따라서, 실습에 사용된 AWS 자원을 삭제하려면 사용된 CloudFormation 을 삭제하고 Web ACL 을 삭제하셔야 합니다.\n1. Web ACL 삭제 Web ACL 을 삭제하기 위해서는 먼저 Web ACL 과 연결되어 있는 AWS Resource 를 제거하여야 합니다. 실습 과정에서 ALB 와의 연결을 설정하였으므로 ALB 와의 연결을 삭제하도록 하겠습니다. ALB 연결을 제거하기 위하여 Web ACL 메뉴의 \u0026ldquo;Associated AWS resources\u0026rdquo; 를 클릭한 후 실습에 사용된 ALB 를 선택합니다. 선택된 ALB 를 삭제하기 위하여 \u0026ldquo;Remove\u0026rdquo; 버튼을 클릭합니다. 아래와 같이 경고창이 나타나면 \u0026ldquo;delete\u0026rdquo; 를 입력한 후 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭합니다. 이제 Web ACL 과 연결되어 있는 ALB 를 삭제하였으므로 Web ACL 을 삭제할 수 있습니다. Web ACL 을 삭제하기 위하여 Web ACL 의 기본 메뉴에서 아래와 같이 실습에 사용된 Web ACL 을 선택한 후 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭합니다. 아래와 같이 경고창이 나타나면 \u0026ldquo;delete\u0026rdquo; 를 입력한 후 \u0026ldquo;Delete\u0026rdquo; 버튼을 클릭합니다. 모든 과정을 정상적으로 진행하였다면 아래와 같이 Web ACL 이 삭제된 것을 확인할 수 있습니다. 2. S3 bucket 삭제 S3 관리 콘솔에 접속한 후 로그 적재에 사용되었던 S3 bucket 을 삭제합니다.\n2. CloudFormation 삭제 CloudFormation 관리 콘솔에 접속한 후 DVWA 생성에 사용되었던 CloudFormation 을 삭제합니다.\n아래와 같이 실습에 사용된 CloudFormation 을 선택한 후 \u0026ldquo;삭제\u0026rdquo; 버튼을 클릭합니다. 삭제를 확인하는 경고창이 나타나면 \u0026ldquo;스택 삭제\u0026rdquo; 버튼을 클릭합니다. CloudFormation 삭제에는 시간이 소요됩니다. 몇 분이 흐른 후 CloudFormation 이 정상적으로 삭제되었음을 확인하시기 바랍니다.\n 이제 모든 실습 과정이 종료되었습니다. 수고하셨습니다!! "
},
{
	"uri": "/mitigation/module2.html",
	"title": "custom rule 추가 1",
	"tags": [],
	"description": "",
	"content": " 이번에는 공격 타입 별 Custom Rule을 작성하여 적용해보록 하겠습니다.\n첫번째로 AWS WAF 에서 제공하는 국가별 IP 정보를 기준으로 특정 국가에서 유입되는 트래픽을 차단하는 실습을 진행하도록 하겠습니다.\nChrome Extension 설정 차단 설정을 하기에 앞서 사용자의 PC 에서 발생하는 트래픽이 특정 국가에서 발생되는 것처럼 환경을 설정하기 위하여 이전 단계에서 설치하였던 Chrome Extension 을 사용하도록 하겠습니다.\n 크롬 브라우저에서 Browsec VPN 을 선택한 후 아래와 같이 \u0026ldquo;OFF\u0026rdquo; 를 \u0026ldquo;On\u0026rdquo; 으로 변경한 후 \u0026ldquo;Change\u0026rdquo; 버튼을 클릭하여 사용하고자하는 국가를 선택합니다.  Browsec 메뉴에서 Premium 으로 표기되어 있는 국가는 별도의 과금이 발생하는 국가이니 실습 과정에서는 반드시 무료 국가를 선택하시기 바랍니다.\n  본 실습에서는 Singapore 를 선택하도록 하겠습니다.  이제 Browsec 이 \u0026ldquo;On\u0026rdquo; 되어 있는 상태에서는 브라우저에서 발생하는 모든 트래픽은 Singapore 에서 발생되는 것처럼 트래픽이 전송되게 됩니다. 이 상태에서 DVWA 페이지가 정상적으로 접속이 되는지 확인합니다.\n  Rule 추가  페이지가 정상적으로 접속이 된다면 이번에는 Singapore 에서 유입되는 트래픽을 차단하는 Rule을 Web ACL 에 추가하도록 하겠습니다. Web ACL 에 새로운 Rule 을 추가하기 위하여 아래와 같이 선택한 Web ACL 의 상세 화면 중 상단의 \u0026ldquo;Rules\u0026rdquo; 를 선택한 후 화면 우측의 \u0026ldquo;Add rules\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 클릭하면 하위 메뉴를 확인할 수 있는데 하위 메뉴 중 \u0026ldquo;Add my own rules and rule groups\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 선택하면 새로운 WAF Rule 을 생성하거나 미리 만들어 둔 Rule Group 을 Web ACL 에 추가할 수 있습니다.   새로운 Rule 을 생성하기 위하여 다음과 같이 여러 옵션들을 정의합니다. 아래 3가지를 제외한 나머지는 모두 기본값으로 선택합니다.\n Name = 임의의 이름 입력 (ex. SG-Block) Inspect = Originates from a country in 선택 Country Codes = Singapore - SG 선택   생성하려고하는 Rule 의 Default Action 이 Block 인 것을 확인한 후 \u0026ldquo;Add Rule\u0026rdquo; 버튼을 클릭합니다.  정상적으로 진행되는 경우 아래와 같이 새로운 Rule 생성이 되고 \u0026ldquo;Set rule priority\u0026rdquo; 화면으로 진행이 되게 되는데 별도의 Priority 설정이 필요 없으므로 \u0026ldquo;Save\u0026rdquo; 버튼을 클릭합니다.  Web ACLs 화면에서 \u0026ldquo;Rules\u0026rdquo; 탭을 클릭하여 새로운 Rule 이 생성된 것을 확인합니다. 아래 화면과 같이 생성된 Rule 이 901 WCU 을 점유하는 것을 확인합니다.   적용한 Rule 테스트  이제 Singapore 에서 발생하는 트래픽을 차단할 수 있는 Rule 이 Web ACL 에 추가되었으므로 크롬 브라우저에서 다시 한 번 DVWA 로 접속해보도록 하겠습니다.\n 모든 설정이 정상적으로 이뤄졌다면 아래와 같이 \u0026ldquo;403 Forbidden\u0026rdquo; 메시지와 함께 차단된 것을 확인할 수 있습니다.  국가별 차단 기능을 확인하였으므로 Browsec 을 아래와 같이 \u0026ldquo;Off\u0026rdquo; 하도록 합니다.   "
},
{
	"uri": "/pre/module1.html",
	"title": "DVWA 설치",
	"tags": [],
	"description": "",
	"content": " 취약한 웹 서비스 환경 구성 이번 모듈에서는 위협 요인이 내재된 환경을 구성하기 위해 CloudFormation을 실행합니다. CloudFormation을 통해 다음과 같은 AWS 리소스가 생성됩니다.\n   AWS 서비스 유형 리소스명 기타     EC2 인스턴스 WAFLab-WebServerInstance t2.micro   ALB MyDVW-Appli-xxxxxx -   VPC VPC 10.10.0.0/16   VPC Subnet PublicSubnet 10.10.0.0/18   VPC Subnet PrivateSubnet 10.10.64.0/18   Kinesis Firehose aws-waf-logs-test AWS WAF 로그 스트림   S3 Bucket mydvwa-xxxxxxxx AWS WAF 로그 버킷    |기타 서비스| Elastic IP, Route table, Security Groups, Network ACL, IAM Role 등|\n AWS 리전 확인\na. 이번 실습은 AWS 서울 (ap-northeast-2) 리전에서 수행됩니다.\nb. AWS 관리 콘솔로 접속해서, 아래의 화면과 같이 AWS 서울 리전이 선택되었는지 확인합니다.  Open AWS Console    본 실습 의 모든 과정은 서울 리전에서 이루어집니다. 원활한 실습 진행을 위해서 반드시 서울 리전이 선택되었는지를 확인하시기 바랍니다.\n  EC2 키페어 생성 (이미 생성된 경우 이 단계 생략)\na. EC2 키페어는 EC2인스턴스 생성을 위해 필요한 항목이므로, CloudFormation 템플릿을 실행하기에 앞서 EC2 키페어를 생성합니다.\nb. 이미 EC2 키페어가 생성된 경우라면, 이 단계를 생략합니다. EC2 키페어가 없다면 EC2 콘솔로 접속하여 키페어를 생성합니다.\nc. EC2 콘솔 화면의 좌측 메뉴에서 “키 페어”를 클릭하고 “키 페어 생성” 버튼을 클릭합니다.\nd. “키 페어 이름”에 “waf-lab-seoul”를 입력한 후, “생성”을 클릭합니다.\ne. 이후 “waf-lab-seoul.pem” 파일을 임의의 폴더에 다운로드합니다.\n   CloudFormation 템플릿 실행\na. CloudFormation은 템플릿 파일 (json, yml)에 EC2 인스턴스, 네트워크 구성 등의 클라우드 인프라 리소스를 모델링하고 클라우드 환경에서 프로비저닝할 수 있는 서비스입니다.\nb. CloudFormation 템플릿을 실행하기 위해 링크를 클릭합니다. 링크를 클릭하면 아래와 같은 화면이 표시됩니다.\n  * 템플릿 생성에 사용된 스택 이름, 파라미터, KeyName, SSHLocation 등은 필요에 따라 수정이 가능합니다. 다만, 원활한 진행을 위하여 가급적 기본값을 사용하시기를 권고드립니다.\n스택 생성을 위하여 IAM 리소스 생성에 대한 허용 체크를 한 뒤 \u0026ldquo;스택 생성\u0026rdquo; 버튼을 클릭합니다. 정상적으로 진행이 되는 경우 아래와 같이 스택의 상태가 \u0026ldquo;CREATE_COMPLETE)으로 되어 있는 것을 확인하실 수 있습니다. DVWA 생성에 사용된 템플릿은 별도의 VPC 와 EIP 등을 추가로 생성하므로 기존에 사용하던 계정에 VPC 나 EIP 의 수가 한계에 도달한 경우 스택 생성이 실패하게 됩니다.\n CloudFormation stack을 통해 아래와 환경이 준비됩니다. "
},
{
	"uri": "/mitigation_deep/module2.html",
	"title": "JSON 기반 Rule 설정",
	"tags": [],
	"description": "",
	"content": " Attack !! 이번 실습에서는 가상의 상황을 가정해보도록 하겠습니다.\n당신은 팀의 보안 담당자 입니다. 서비스 하고 있는 웹 어플리케이션에서 최근에 한국IP로 지속적으로 공격이 들어오고 있어 확인을 해보니 다음과 같은 특징이 있었습니다. 1. 공격의 대부분은 한국에서 온 공격이다. 하지만 한국에서는 실제 고객들이 요청하는 정상 트래픽도 있다. 2. 한국에서 오는 공격은 request body 가 비정상적으로 커서 100byte 이상이거나 header \u0026ldquo;x-value\u0026rdquo; 의 값이 \u0026ldquo;bot\u0026ldquo;이나 \u0026ldquo;BOT\u0026ldquo;으로 들어온다.\n이제 당신은 새로운 규칙을 작성해서 정상 요청을 막지 않는 선에서 악의적인 공격을 막아야 합니다.\nJSON 기반 Rule 작성 중첩문 (nested statement)를 포함하는 Rule은 Rule visual editor에서 편집할 수 없습니다. 따라서 해당 시나리오에서는 JSON editor를 사용해서 Rule을 작성해야합니다.\n  이제 JSON 기반 Rule 설정을 해보도록 하겠습니다. 아래와 같이 새로운 Rule 을 추가하기 위하여 \u0026ldquo;Add my own rules and rule gruops\u0026rdquo; 버튼을 클릭합니다.  Rule Builder 에서 Rule JSON editor를 클릭합니다.  우선 JSON 문서에 Rule name 과 MetricName을 추가합니다. 둘다 \u0026ldquo;TESTRule\u0026ldquo;로 지정하겠습니다\n{ \u0026quot;Name\u0026quot;: \u0026quot;TestRule\u0026quot;, \u0026quot;Priority\u0026quot;: 0, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;TestRule\u0026quot; }, \u0026quot;Statement\u0026quot;: {} }  위와 같은 요구사항을 맞추기 위해서는 중첩 구조가 필요합니다. 다음과 같은 구조로 작성할 수 있습니다.\n{ \u0026quot;Name\u0026quot;: \u0026quot;TestRule\u0026quot;, \u0026quot;Priority\u0026quot;: 0, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;TestRule\u0026quot; }, \u0026quot;Statements\u0026quot;: { \u0026quot;AndStatement\u0026quot;: { \u0026quot;Statements\u0026quot;: [ { //한국에서 들어오는 요청 조건 }, { \u0026quot;OrStatement\u0026quot;: { \u0026quot;Statements\u0026quot;: [ { //Request Body 크기에 대한 조건 }, { //요청 헤더에 대한 조건 } ] } } ] } } }  JSON 구조에서 다음과 같이 AND 문안에 OR문이 중첩되어 있는 것을 확인할 수 있습니다.  힌트를 드릴테니 Rule을 완성해보시기 바랍니다.\n   국가기반 일치 조건은 \u0026ldquo;GeoMatchStatement\u0026rdquo; 입니다. 한국의 \u0026ldquo;CountryCodes\u0026ldquo;는 \u0026ldquo;KR\u0026ldquo;입니다. 크기제약 조건은 \u0026ldquo;SizeConstraintStatement\u0026rdquo; 입니다. 비교연산자 \u0026ldquo;ComparisonOperator\u0026rdquo; 는 \u0026ldquo;GT\u0026ldquo;입니다. 문자열일치 조건은 \u0026ldquo;ByteMatchStatement\u0026rdquo; 입니다. \u0026ldquo;bot\u0026ldquo;이나 \u0026ldquo;BOT\u0026rdquo; 을 모두 걸러낼 수 있는 TextTransformations는 \u0026ldquo;LowerCase\u0026rdquo; 입니다.    정답 보기    완성된 Rule은 다음과 같은 모습을 보입니다.\n { \u0026quot;Name\u0026quot;: \u0026quot;TestRule\u0026quot;, \u0026quot;Priority\u0026quot;: 0, \u0026quot;Action\u0026quot;: { \u0026quot;Block\u0026quot;: {} }, \u0026quot;VisibilityConfig\u0026quot;: { \u0026quot;SampledRequestsEnabled\u0026quot;: true, \u0026quot;CloudWatchMetricsEnabled\u0026quot;: true, \u0026quot;MetricName\u0026quot;: \u0026quot;TestRule\u0026quot; }, \u0026quot;Statement\u0026quot;: { \u0026quot;AndStatement\u0026quot;: { \u0026quot;Statements\u0026quot;: [ { \u0026quot;GeoMatchStatement\u0026quot;: { \u0026quot;CountryCodes\u0026quot;: [ \u0026quot;KR\u0026quot; ] } }, { \u0026quot;OrStatement\u0026quot;: { \u0026quot;Statements\u0026quot;: [ { \u0026quot;SizeConstraintStatement\u0026quot;: { \u0026quot;FieldToMatch\u0026quot;: { \u0026quot;Body\u0026quot;: {} }, \u0026quot;ComparisonOperator\u0026quot;: \u0026quot;GT\u0026quot;, \u0026quot;Size\u0026quot;: 100, \u0026quot;TextTransformations\u0026quot;: [ { \u0026quot;Priority\u0026quot;: 0, \u0026quot;Type\u0026quot;: \u0026quot;NONE\u0026quot; } ] } }, { \u0026quot;ByteMatchStatement\u0026quot;: { \u0026quot;SearchString\u0026quot;: \u0026quot;bot\u0026quot;, \u0026quot;FieldToMatch\u0026quot;: { \u0026quot;SingleHeader\u0026quot;: { \u0026quot;Name\u0026quot;: \u0026quot;x-value\u0026quot; } }, \u0026quot;TextTransformations\u0026quot;: [ { \u0026quot;Priority\u0026quot;: 0, \u0026quot;Type\u0026quot;: \u0026quot;LOWERCASE\u0026quot; } ], \u0026quot;PositionalConstraint\u0026quot;: \u0026quot;EXACTLY\u0026quot; } } ] } } ] } } }     적용한 Rule 테스트 좀 더 다양한 파라미터를 전달할 수 있도록 CLI 를 사용하겠습니다.\n 사용하고 계시는 PC의 Terminal로 접속합니다.  가이드는 MAC OS 기반으로 작성되었습니다. 하지만 다른 OS에서도 동일하게 적용됩니다.\n  우선 편의를 위해 DVWA 웹의 endpoint 값을 변수로 export 합니다. endpoint값은 모듈 1에서 생성한 CloudFormation Stack \u0026ldquo;MyDVWA\u0026rdquo;의 Output 탭에서 찾을 수 있는 \u0026ldquo;AlbEndpoint\u0026rdquo; 값입니다.\nexport waflab_url=\u0026lt;your AlbEndpoint form CloudFormation stack\u0026gt;  공격자를 가장하여 다음과 같은 요청을 보내봅니다.\n# Blocked (header string match conddition) curl -i -H \u0026quot;x-value: bot\u0026quot; $waflab_url # Blocked (request body size condition) curl -i -X POST -d \u0026quot;Amazon\u0026quot;:\u0026quot;30\u0026quot;,\u0026quot;is\u0026quot;:\u0026quot;12374934237\u0026quot;,\u0026quot;known\u0026quot;:\u0026quot;Target 3\u0026quot;,\u0026quot;as\u0026quot;:null,\u0026quot;one\u0026quot;:\u0026quot;Configuration Deneme 3\u0026quot;,\u0026quot;of\u0026quot;:null,\u0026quot;the\u0026quot;:\u0026quot;Configuration Deneme 3\u0026quot;,\u0026quot;most\u0026quot;:0,\u0026quot;customer-centric\u0026quot;:3,\u0026quot;companies\u0026quot;:true $waflab_url  다음과 같을 때는 정상 요청으로 판단되어 요청이 허용됩니다.\n# Allowed (header string match conddition \u0026amp; request body size condition) curl -i -H \u0026quot;x-value: notbot\u0026quot; -X POST -d \u0026quot;valid\u0026quot;:\u0026quot;size\u0026quot; $waflab_url   이번 실습의 Rule은 한국의 요청에 한해 조건들을 적용시키기 때문에 다른 국가에서 요청을 보내게 되면 어떤 룰도 차단되지 않는 것이 정상입니다. 의도한대로 차단 혹은 허용이 되지 않는다면 현재 VPN이나 다른 국가의 EC2에서 요청을 보내고 있는지 확인해보시기 바랍니다.\n "
},
{
	"uri": "/attack/module2.html",
	"title": "XSS Exploit",
	"tags": [],
	"description": "",
	"content": "실제로 발생하는 다양한 웹 서비스 공격방식 중 하나인 XSS Exploit 공격을 진행하도록 하겠습니다.\n XSS Exploit 공격을 진행하기 위하여 DVWA 메뉴에서 아래와 같이 \u0026ldquo;XSS(Reflected)\u0026rdquo; 메뉴를 클릭한 후 우측의 \u0026ldquo;User ID\u0026rdquo; 를 입력하는 화면에서 아래의 XSS 코드를 입력한 후 \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭합니다.\n\u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;    \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭하면 아래와 같이 경고창이 나타나며 경고창에는 쿠키 정보가 포함되어 있는 것을 확인할 수 있습니다. 이 경고창은 조금 전 입력한 XSS 코드에 의하여 생성된 것으로 취약한 시스템에서의 쿠키 정보를 탈취하는 것을 손쉽게 시연하기 위하여 경고창이 사용되었습니다.   경고창의 \u0026ldquo;OK\u0026rdquo; 버튼을 클릭하면 아래와 같이 XSS (Reflected)화면에 Hello 라는 문자가 출력된 것을 확인할 수 있습니다.  참고로 DVWA 웹페이지의 XSS(Reflected)취약점에 적용된 소스코드는 다음과 같습니다.\n\u0026lt;?php header (\u0026quot;X-XSS-Protection: 0\u0026quot;); // Is there any input? if( array_key_exists( \u0026quot;name\u0026quot;, $_GET ) \u0026amp;\u0026amp; $_GET[ 'name' ] != NULL ) { // Feedback for end user echo '\u0026lt;pre\u0026gt;Hello ' . $_GET[ 'name' ] . '\u0026lt;/pre\u0026gt;'; } ?\u0026gt;  본 실습에서 사용한 SQL 구문은 XSS 공격에 사용되는 가장 기본적인 구문 중 하나입니다. 현재 사용되는 대부분의 웹 서비스는 이와 같은 간단한 XSS 코드에 대해서는 취약점이 없을 것으로 예상되지만 테스트 목적 이외의 악의적인 사용해서는 안되며 해당 행위로 인한 책임은 사용자에게 있음을 밝힙니다.\n "
},
{
	"uri": "/overview/module2.html",
	"title": "사전 준비 사항",
	"tags": [],
	"description": "",
	"content": "본 실습은 다음과 같은 사전 준비사항을 요구합니다.\n AWS 계정 Chrome Browser  실습 과정을 원활하게 진행하기 위해서는 크롬 브라우져가 필요하므로 사용하시는 랩탑에 크롬 브라우져를 설치해주시기 바랍니다.\n "
},
{
	"uri": "/attack.html",
	"title": "공격 테스트",
	"tags": [],
	"description": "",
	"content": " CloudFormation 을 통해 생성된 DVWA 웹 서버를 이용하여 웹 공격을 실습해보도록 하겠습니다. 공격방식은 일반적으로 웹 공격에 많이 사용되는 SQL Injection 공격과 XSS 공격을 사용하도록 하겠습니다.  랩 과정 중에 사용된 각 공격은 대상 웹서버 환경에 따라 악의적으로 사용될 수 있으므로 랩 이외의 환경에서는 사용하지 않아야하며 해당 공격 방법 사용에 따른 책임은 사용자에 있습니다.\n "
},
{
	"uri": "/mitigation/module3.html",
	"title": "custom rule 추가 2",
	"tags": [],
	"description": "",
	"content": " Custom Rule 적용 실습 두번째로, AWS WAF 에서 제공하는 문자열 일치 기반으로 특정 user-agent 로 유입되는 트래픽을 차단하는 실습을 진행하도록 하겠습니다.\n 차단 설정을 하기에 앞서 사용자의 PC 에서 발생하는 트래픽이 user-agent 로 유입되는 것처럼 환경을 설정하기 위하여 이전 단계에서 설치하였던 Chrome Extension 을 사용하도록 하겠습니다.\n 크롬 브라우저에서 User-Agent Switcher 을 선택한 후 아래와 같이 \u0026ldquo;iOS\u0026rdquo; 와 \u0026ldquo;iPhone6\u0026rdquo;을 차례대로 선택합니다.  이제 이 상태에서는 브라우저에서 발생하는 모든 트래픽은 iPhone6 라는 user-agent를 헤더로 트래픽이 전송되게 됩니다. 이 상태에서 DVWA 페이지가 정상적으로 접속이 되는지 확인합니다.\n 페이지가 정상적으로 접속이 된다면 이번에는 해당 user-agent 로 유입되는 트래픽을 차단하는 정책을 Web ACL 에 추가하도록 하겠습니다. Web ACL 에 새로운 Rule 을 추가하기 위하여 아래와 같이 선택한 Web ACL 의 상세 화면 중 상단의 \u0026ldquo;Rules\u0026rdquo; 를 선택한 후 화면 우측의 \u0026ldquo;Add rules\u0026rdquo; 메뉴를 클릭합니다. 이 메뉴를 클릭하면 하위 메뉴를 확인할 수 있는데 하위 메뉴 중 \u0026ldquo;Add my own rules and rule groups\u0026rdquo; 메뉴를 클릭합니다.\n   새로운 Rule 을 생성하기 위하여 다음과 같이 여러 옵션들을 정의합니다. 아래 3가지를 제외한 나머지는 모두 기본값으로 선택합니다.  Name = 임의의 이름 입력 (ex. iphone-Block) Inspect = Header 선택 Header Field Name = User-Agent 입력 Match Type = Contains String 선택 String to match = iphone 입력 Text Transformation = Lowercase 선택    생성하려고하는 Rule 의 Default Action 이 Block 인 것을 확인한 후 \u0026ldquo;Add Rule\u0026rdquo; 버튼을 클릭합니다.  정상적으로 진행되는 경우 아래와 같이 새로운 Rule 생성이 되고 \u0026ldquo;Set rule priority\u0026rdquo; 화면으로 진행이 되게 되는데 별도의 Priority 설정이 필요 없으므로 \u0026ldquo;Save\u0026rdquo; 버튼을 클릭합니다.  Web ACLs 화면에서 \u0026ldquo;Rules\u0026rdquo; 탭을 클릭하여 새로운 Rule 이 생성된 것을 확인합니다. 아래 화면과 같이 생성된 Rule 이 921 WCU 을 점유하는 것을 확인합니다.   적용한 Rule 테스트  이제 특정 user-agent로 발생하는 트래픽을 차단할 수 있는 Rule 이 Web ACL 에 추가되었으므로 크롬 브라우저에서 다시 한 번 DVWA 로 접속해보도록 하겠습니다.\n 모든 설정이 정상적으로 이뤄졌다면 아래와 같이 \u0026ldquo;403 Forbidden\u0026rdquo; 메시지와 함께 차단된 것을 확인할 수 있습니다.  문자열 일치 기반 차단 기능을 확인하였으므로 User-Agent Switcher 를 아래와 같이 원복 합니다.   "
},
{
	"uri": "/pre/module2.html",
	"title": "DVWA 확인",
	"tags": [],
	"description": "",
	"content": " DVWA 웹 페이지 접속 확인 DVWA 스택이 정상적으로 생성되었다면 템플릿을 통하여 생성된 DVWA 웹페이지에 정상적으로 접속이 되는지 확인해보도록 하겠습니다.\n AWS Management Console 의 EC2 메뉴하단에 새로운 ALB (Application Load Balancer)가 생성된 것을 확인한 후 해당 ALB 의 DNS 이름을 이용하여 인터넷 브라우져에서 접속합니다.  아래와 같이 DVWA 의 로그인 페이지로 접속이 가능한 것을 확인합니다.  \u0026ldquo;ID = admin\u0026rdquo;, \u0026ldquo;Password = password\u0026rdquo; 를 입력하고 다음과 같이 DVWA 에 정상적으로 로그인이 되는 것을 확인합니다.   DVWA 환경 설정 본 실습에서 생성된 DVWA 서버는 기본적으로 주요 취약점을 사용할 수 없는 환경으로 설정이 되어 있습니다. 따라서, 실습 진행과정에서 공격을 쉽게 수행하기 위해서는 DVWA 의 Security Level 설정을 변경해주어야 합니다.\n DVWA 에 접속한 후 다음과 같이 화면 하단의 \u0026ldquo;DVWA Security\u0026rdquo; 메뉴를 클릭합니다.   DVWA Security 화면으로 이동한 후 화면 중간의 Pull Down 메뉴에서 기본값으로 설정되어 있는 \u0026ldquo;Impossible\u0026rdquo; 을 \u0026ldquo;Low\u0026rdquo; 로 변경한 후 \u0026ldquo;Submit\u0026rdquo; 버튼을 클릭합니다.   "
},
{
	"uri": "/mitigation.html",
	"title": "AWS WAF를 이용한 방어",
	"tags": [],
	"description": "",
	"content": " AWS WAF 를 이용하여 웹 액세스 제어 목록(웹 ACL)을 생성하고 필요한 Rule을 추가하는 방법을 살펴보도록 하겠습니다. AWS Manaed Rule을 이용해서 이전 실습에서 진행하였던 SQL Injection 공격과 XSS 공격을 차단해 봅니다. custom Rule을 이용해서 특정 국가 및 특정 user-agent 에서 유입되는 트래픽을 차단해 봅니다.  "
},
{
	"uri": "/pre/module3.html",
	"title": "Chrome Extention 설치",
	"tags": [],
	"description": "",
	"content": " Browsec VPN 설치 AWS WAF 에서는 국가별 공인 IP 를 기준으로 트래픽을 허용/차단 하는 기능을 제공하고 있습니다. 랩 과정에서 지정된 국가를 차단하는 환경을 가상으로 구성하기위하여 Chrome 에서 사용할 수 있는 \u0026ldquo;Browsec VPN\u0026rdquo; 을 설치하도록 하겠습니다.\n Chrome Store 링크를 클릭한 후 아래와 같이 Browsec Extension 을 선택한 후 \u0026ldquo;Add to Chrome(또는 크롬에 추가)\u0026rdquo; 버튼을 클릭합니다.   아래와 같이 Extension 설치를 확인하는 확인창이 뜨면 \u0026ldquo;Add Extension\u0026rdquo; 을 클릭하여 설치를 계속합니다.  설치된 Browsec VPN Exntension 은 이후 실습 과정에서 브라우저의 출발지 국가 정보를 변경하여 AWS WAF 의 국가별 차단 기능을 점검하는데 사용됩니다.\nBrowsec VPN Extension 은 사용자의 필요에 따라 Chrome 에서 실습 이후에도 사용하실 수 있으며 불필요한 경우 Lab 종료 이후에 삭제하시기 바랍니다.\n User-Agent Switcher 설치 AWS WAF 에서는 웹 요청의 user-agent 헤더를 기준으로 트래픽을 허용/차단 하는 기능을 제공하고 있습니다. 랩 과정에서 특정 user-agent 값을 차단하는 환경을 가상으로 구성하기위하여 Chrome 에서 사용할 수 있는 \u0026ldquo;User-Agent Switcher\u0026rdquo; 을 설치하도록 하겠습니다.\n Chrome Store 링크를 클릭한 후 아래와 같이 User-Agent Switcher 을 선택한 후 \u0026ldquo;Add to Chrome(또는 크롬에 추가)\u0026rdquo; 버튼을 클릭합니다.  Extension 설치를 확인하는 확인창이 뜨면 \u0026ldquo;Add Extension\u0026rdquo; 을 클릭하여 설치를 계속합니다.\n설치된 User-Agent Switcher Exntension 은 이후 실습 과정에서 브라우저의 요청 user-agent 헤더를 변경하여 AWS WAF 의 헤더 필터 기능을 점검하는데 사용됩니다.\nUser-Agent Switcher Exntension 은 사용자의 필요에 따라 Chrome 에서 실습 이후에도 사용하실 수 있으며 불필요한 경우 Lab 종료 이후에 삭제하시기 바랍니다.\n "
},
{
	"uri": "/mitigation_deep.html",
	"title": "AWS WAF를 이용한 방어 (심화)",
	"tags": [],
	"description": "",
	"content": " AWS WAF 에서 제공하는 JSON Editor 를 이용하여 조금 더 복잡한 Rule 을 생성하고 적용하는 방법에 대해 살펴보도록 하겠습니다.  "
},
{
	"uri": "/pre/module4.html",
	"title": "AWS WAF Web ACL 구성",
	"tags": [],
	"description": "",
	"content": "이번에는 웹 공격을 방어하기 위한 AWS WAF 를 구성해보도록 하겠습니다.\nAWS WAF 를 구성하는 방법은 여러가지가 있지만 본 실습에서는 Web ACL 을 먼저 생성한 후 이후 모듈 3.과 모듈 4. 에서 각 공격 유형별로 Rule 을 생성하여 Web ACL 에 추가하는 방법을 따르도록 하겠습니다.\n현재 AWS WAF 는 기존에 제공되던 AWS WAF 메뉴와 함께 새로운 AWS WAF v2 메뉴가 제공되고 있습니다. 본 실습에서는 AWS WAF v2 를 기준으로 진행되기 때문에 반드시 새로운 AWS WAF 메뉴를 선택하신 후 진행하시기 바랍니다.\n  AWS WAF 콘솔로 이동합니다. 링크를 클릭해서 이동할 수 있습니다.\n 아래와 같이 AWS WAF 메뉴에서 Web ACL 을 선택한 후 \u0026ldquo;Create Web ACL\u0026rdquo; 버튼을 클릭합니다.  먼저 화면 중간의 \u0026ldquo;Resource Type\u0026rdquo; 을 \u0026ldquo;Regional Resources\u0026rdquo; 로 선택한 후 \u0026ldquo;Region\u0026rdquo; 을 \u0026ldquo;Asia Pacific(Seoul)\u0026rdquo; 로 선택하시기 바랍니다. Region 선택이 끝나신 후 \u0026ldquo;Name\u0026rdquo; 에 적당한 이름을 입력하시기 바랍니다. \u0026ldquo;Name\u0026rdquo; 을 입력한 후 TAB 을 누르시면 \u0026ldquo;Cloudwatch Metric Name\u0026rdquo; 이 Web ACL Name 과 동일한 이름으로 자동입력 됩니다.  생성되는 WebACL 에 리소스를 할당하기 위하여 \u0026ldquo;Add AWS Resources\u0026rdquo; 버튼을 클릭합니다.  \u0026ldquo;Add AWS Resources\u0026rdquo; 화면에서 이전 과정에서 생성되었던 ALB 를 선택한 후 \u0026ldquo;Add\u0026rdquo; 버튼을 클릭합니다.  아래와 같이 ALB 가 정상적으로 추가된 것을 확인한 후 \u0026ldquo;Next\u0026rdquo; 버튼을 클릭합니다.  Rule 설정은 이후 과정에서 진행할 것이므로 그대로두고 화면 하단의 \u0026ldquo;Default Action\u0026rdquo; 이 \u0026ldquo;Allow\u0026rdquo; 로 되어 있는 것을 확인한 후 \u0026ldquo;Next\u0026rdquo; 버튼을 클릭합니다.  설정된 Rule 없으므로 \u0026ldquo;Set Rule Priority\u0026rdquo; 에서 \u0026ldquo;Next\u0026rdquo; 를 클릭합니다.  \u0026ldquo;Configure Metrics\u0026rdquo; 에서도 \u0026ldquo;Next\u0026rdquo; 를 클릭합니다.  지금까지 설정한 내용이 모두 맞는지 확인한 후 \u0026ldquo;Create Web ACL\u0026rdquo; 버튼을 클릭합니다.   정상적으로 진행되었다면 아래 화면과 같이 새로운 Web ACL 이 생성되는 것을 확인할 수 있습니다. "
},
{
	"uri": "/logging.html",
	"title": "AWS WAF 로깅 확인",
	"tags": [],
	"description": "",
	"content": " AWS WAF에서 발생하는 로그들을 조회하고 활용해보는 실습을 진행합니다.  "
},
{
	"uri": "/pre/module5.html",
	"title": "AWS WAF 로깅 활성화",
	"tags": [],
	"description": "",
	"content": "AWS WAF는 Amazon Kinesis Firehose를 사용하여 로그를 저장합니다. 이를 통해 Amazon S3, Amazon Redshift 또는 Amazon Elastic Search와 같은 모든 Kinesis Firehose 대상으로 로그를 전달하고 또 분석할 수 있습니다. 웹 ACL에서 요청을 로깅하려면 먼저 Kinesis Data Firehose를 생성해야 하는데, 해당 실습에서는 이미 모듈 1. 에서 CloudFormation 스택을 통해 Kinesis Firehose와 최종 대상인 S3 bucket을 생성했습니다.\n이 실습의 로깅 활성화를 한 뒤 모듈 5.에서 로깅 내역을 확인해볼 예정입니다.\n 우선 Kinesis Firehose가 잘 생성되었는지 확인해보겠습니다. 링크를 클릭히여 kinesis 콘솔로 이동합니다.\n 다음과 같이 \u0026lsquo;aws-waf-log-\u0026lsquo;로 시작하는 kinesis firehose delivery stream이 생성되어있는 것을 확인합니다.   AWS WAF에서 kinesis로 로그를 스트리밍하기 위해서는 접두사 aws-waf-logs-로 시작하는 이름을 사용하여 Amazon Kinesis Data Firehose를 생성해야합니다.\n  다시 WAF 콘솔로 돌아와 이번에는 로깅을 활성화 해보겠습니다.\n WebACL \u0026ldquo;MyWAF\u0026rdquo; 에서 Logging and Metrics 탭으로 이동하여 Logging이 Disable되어있는 것을 확인하고 \u0026ldquo;Enable Logging\u0026rdquo;을 클릭합니다.  Amazon Kinesis Data Firehose Delivery Stream에서 CloudFormation으로 자동생성된 \u0026ldquo;aws-waf-logs-test\u0026rdquo;를 선택합니다.  하기의 Redacted fields에서는 필요없다고 생각되는 필드인 \u0026ldquo;Query string\u0026ldquo;을 클릭합니다. 이 설정으로 인해 로그에는 Query string값이 기록되지 않습니다. 설정이 끝나면 \u0026ldquo;Enable logging\u0026rdquo;을 클릭하여 저장합니다.  다음과 같이 Logging이 Enable된 것을 확인할 수 있습니다.  이제 다음 모듈부터 진행할 공격 테스트 및 차단 테스트는 모두 kinesis firehose를 타고 S3 버킷에 쌓이게 됩니다.\n  "
},
{
	"uri": "/post.html",
	"title": "마무리",
	"tags": [],
	"description": "",
	"content": "수고하셨습니다!!.\n마지막으로 실습에 사용된 AWS 자원들을 삭제하는 시간입니다. 실습을 진행하면서 사용된 AWS 자원은 미사용시에도 과금이 발생할 수 있기 때문에 반드시 안내되는 절차에 따라 삭제하셔야 합니다.\n  Report an issue   Learn more  "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/authors.html",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "   Timestamp Name Alias Activity     2019.12 Shin Eunsu @eunsshin initial creation   2020.02 Cho Yijeong @yijeong update   2020.03 Cho Yijeong @yijeong update lab based on feedback    Originial content is available at : https://github.com/sessin/awswafhol\n"
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]